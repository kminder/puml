@startuml
title Secure Map Reduce 2 - Node Manager Token Flow
autonumber
'hide footbox

'participant "Client\n(c)" as C
participant "Resource\nManager\n(rm)" as RM
'participant "History\nServer\n(hs)" as HS
participant "Node\nManager\n(nm)" as NM
'participant "Shuffle\nHandler\n(ss)" as SS
participant "Application\nMaster\n(am)" as AM
'participant "Client\nService\n(cs)" as CS
'participant "Application\nContainer\n(ac)" as AC #red
'participant "Task\n(t)" as T #orange
'participant "File\nSystem\n(fs)" as FS
'participant "Name\nNode\n(nn)" as NN
'participant "Data\nNode\n(dn)" as DN
'participant "Kerberos\nKDC" as KDC

'note over C,KDC #green: QUESTION ?

== Bootstrap ==

'1
'BaseNMTokenSecretManager.createNewMasterKey
RM->RM:<b>createNewMasterKey</b>(): nm-tkn-mk
  note right: Create secret to shared with NodeManagers.

'2
'ResourceTrackerService.registerNodeManager/nodeHeartbeat
NM->RM:<b>registerNodeManager/nodeHeartbeat</b>[...](...): nm-tkn-mk, ...
  note right: Share secret nm-tkn-mk with NodeManagers.

== Job Submission ==

== Job Initiation ==

'3
[->RM: ?
  note right #green: Q1: How are jobs are discovered on the queue?
  activate RM

'4
'ApplicationMasterService.allocate
RM->RM: <b>allocate</b>[...](...)
  note right: Allocate Container for MapReduce AppMaster.
  activate RM

'5
'NMTokenSecretManagerInRM.getNMTokens
'NMTokenSecretManagerInRM.createNMToken
RM->RM: <b>createNMToken</b>( nm-tkn-mk, ... ): am-nm-tkn
  note right: Create NMToken for ResourceManager to start MapReduce AppMaster Container.

'6
RM<--RM: :<b>AllocateResponse</b>{am-nm-tkn,...}
  note right: Return NM Token returned from allocate() as part of AllocateResponse.
  deactivate RM

'7
'NMClientImpl.startContainer
'ContainerManagerImpl.startContainer
RM->NM: <b>startContainer</b> [RSAT(am-nm-tkn)] (...)
  note right: Verifies am-nn-tkn with nn-tkn-mk via RPC/SASL.
  deactivate RM

== Map Task Execution ==

'8
'ApplicationMasterService.allocate
AM->RM: <b>allocate</b>[...](...)
  note right: Allocate Container for Map Task.
  activate RM

'9
'NMTokenSecretManagerInRM.getNMTokens
'NMTokenSecretManagerInRM.createNMToken
RM->RM: <b>createNMToken</b>( nm-tkn-mk, ... ): mt-nm-tkn
  note right: Create NMToken for ApplicationMaster to start Map Task Container.

'10
AM<--RM: :<b>AllocateResponse</b>{mt-nm-tkn,...}
  note right: NMToken returned in AllocateResponse.
  deactivate RM

'11
'NMClientImpl.startContainer
'ContainerManagerImpl.startContainer
AM->NM: <b>startContainer</b> [RSAT(mt-nm-tkn)] (...)
  note left: Verifies mt-nn-tkn with nn-tkn-mk via RPC/SASL.

== Reduce Task Execution ==

'12
'ApplicationMasterService.allocate
AM->RM: <b>allocate</b>[...](...)
  note right: Allocate Container for Reduce Task.
  activate RM

'13
'NMTokenSecretManagerInRM.getNMTokens
'NMTokenSecretManagerInRM.createNMToken
RM->RM: <b>createNMToken</b> ( nm-tkn-mk, ... ): rt-nm-tkn
  note right: Create NMToken for ApplicationMaster to start Reduce Task Container.

'14
AM<--RM: :<b>AllocateResponse</b>{rt-nm-tkn,...}
  note right: NMToken returned in AllocateResponse.
  deactivate RM

'15
'NMClientImpl.startContainer
'ContainerManagerImpl.startContainer
AM->NM: <b>startContainer</b> [RSAT(rt-nm-tkn)] (...)
  note left: Verifies rt-nn-tkn with nn-tkn-mk via RPC/SASL.

@enduml